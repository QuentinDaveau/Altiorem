[gd_resource type="ShaderMaterial" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=4]
source = 2

[sub_resource type="OpenSimplexNoise" id=5]

[sub_resource type="NoiseTexture" id=6]
seamless = true
noise = SubResource( 5 )

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = SubResource( 6 )

[sub_resource type="OpenSimplexNoise" id=8]
seed = 1
period = 110.0

[sub_resource type="NoiseTexture" id=9]
seamless = true
noise = SubResource( 8 )

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = SubResource( 9 )

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 3

[sub_resource type="VisualShaderNodeScalarConstant" id=13]
constant = 10.0

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=15]

[sub_resource type="VisualShaderNodeVectorOp" id=16]
operator = 1

[sub_resource type="VisualShader" id=17]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Texture:14
	vec3 n_out14p0;
	float n_out14p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out14p0 = _tex_read.rgb;
		n_out14p1 = _tex_read.a;
	}

// Input:7
	vec3 n_out7p0 = vec3(UV, 0.0);

// Input:4
	float n_out4p0 = TIME;

// Scalar:6
	float n_out6p0 = 10.000000;

// ScalarOp:5
	float n_out5p0 = n_out4p0 / n_out6p0;

// VectorOp:8
	vec3 n_out8p0 = n_out7p0 + vec3(n_out5p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out8p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorOp:9
	vec3 n_out9p0 = n_out7p0 - vec3(n_out5p0);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out9p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// VectorOp:10
	vec3 n_out10p0 = n_out2p0 * n_out3p0;

// ScalarOp:11
	float n_in11p1 = 2.00000;
	float n_out11p0 = dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333)) * n_in11p1;

// ScalarOp:13
	float n_out13p0 = n_out14p1 * n_out11p0;

// Output:0
	COLOR.a = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -551.5, 168 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 960, 320 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( 80, 240 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( 80, 480 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( -500, 320 )
nodes/fragment/5/node = SubResource( 12 )
nodes/fragment/5/position = Vector2( -300, 360 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( -500, 440 )
nodes/fragment/7/node = SubResource( 14 )
nodes/fragment/7/position = Vector2( -500, 520 )
nodes/fragment/8/node = SubResource( 15 )
nodes/fragment/8/position = Vector2( -280, 240 )
nodes/fragment/9/node = SubResource( 16 )
nodes/fragment/9/position = Vector2( -280, 500 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 260, 400 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 480, 380 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 720, 360 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 500, 160 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 6, 0, 5, 1, 7, 0, 8, 0, 5, 0, 8, 1, 7, 0, 9, 0, 5, 0, 9, 1, 2, 0, 10, 0, 3, 0, 10, 1, 10, 0, 11, 0, 11, 0, 13, 1, 14, 1, 13, 0, 13, 0, 0, 1, 9, 0, 3, 0, 8, 0, 2, 0 )

[resource]
shader = SubResource( 17 )
